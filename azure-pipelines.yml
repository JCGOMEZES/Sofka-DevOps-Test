# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'
    
- task: Docker@2
  displayName: login
  inputs:
    containerRegistry: 'Bex_Default_Openshift_Dev_Registry'
    command: login

- bash: |
   GIT_VERSION=$(short.commit)
   BRANCH_NAME=$(echo $(Build.SourceBranch) | awk -F/ '{print $3}')
   echo "--Dockerfile"
   cat Dockerfile
   echo ""
   echo ""
   echo "--Build"
   docker build -t $(registry.base.url)/$(registry.namespace)/$(service.name):$(service.version)-$GIT_VERSION .
  displayName: 'Build - Docker Build'
  steps:
  
- bash: |
   GIT_VERSION=$(short.commit)
   BRANCH_NAME=$(echo $(Build.SourceBranch) | awk -F/ '{print $3}')
   publishPath=$(Build.SourcesDirectory)/build-$(Build.BuildNumber)

   docker image push $(registry.base.url)/$(registry.namespace)/$(service.name):$(service.version)-$GIT_VERSION
   #Clean directory
   if [ -d target ]; then
      rm -R target
   fi
   if [ -d pack ]; then
      rm -R pack
   fi
   echo ""
   echo "--Copy to publish: $publishPath"
   mkdir -p "$publishPath"
   echo "build: $(Build.BuildNumber)" > $publishPath/build-report-$(Build.BuildNumber).json
   echo "base Image: $(registry.base.url)/$(registry.base.namespace)/$(registry.name.tag)" >> $publishPath/build-report-$(Build.BuildNumber).json
   echo "image: $(service.name):$(service.version)-$GIT_VERSION" >> $publishPath/build-report-$(Build.BuildNumber).json
   echo "" >> $publishPath/build-report-$(Build.BuildNumber).json
   echo "$(docker images -q $(service.name):$(service.version)-$GIT_VERSION)" >> $publishPath/build-report-$(Build.BuildNumber).json
   ls -al $publishPath
   echo ""
   cat $publishPath/build-report-$(Build.BuildNumber).json
   echo "-- Remove Image"
   docker rmi $(registry.base.url)/$(registry.namespace)/$(service.name):$(service.version)-$GIT_VERSION
  displayName: '-B->> Build - Push image'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/Imagen'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: 'ApiRest/target/Sofka-DevOps-Test-0.0.1-SNAPSHOT.js'
    TargetFolder: '$(build.artifactstagingdirectory)/Imagen'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: 'Copy Files Docker to: $(build.artifactstagingdirectory) '
  inputs:
    SourceFolder: Docker
    Contents: '*'
    TargetFolder: '$(build.artifactstagingdirectory)/Imagen/ApiRest/target'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: imagen'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Imagen/ApiRest/target'
    ArtifactName: imagen

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: latest

- task: TerraformCLI@0
  displayName: 'terraform Init'
  inputs:
    command: 'init'
    workingDirectory: 'Infraestructura'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform Plan'
  inputs:
    command: 'plan'
    workingDirectory: 'Infraestructura'
    allowTelemetryCollection: true
    publishPlanResults: 'Plan_Infraestructura_Desplegar'

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'terraform Apply'
  inputs:
    command: apply
    workingDirectory: Infraestructura
    commandOptions: '--auto-approve'

- task: TerraformCLI@0
  inputs:
    command: 'destroy'
    workingDirectory: 'Infraestructura'
    commandOptions: '--auto-approve'
    allowTelemetryCollection: false
  
